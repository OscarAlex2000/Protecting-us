{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport * as mapboxgl from 'mapbox-gl';\nimport Swal from 'sweetalert2';\nlet MapComponent = class MapComponent {\n  get marcadores() {\n    return this.dashService.marcadores;\n  }\n  get totalMarcadores() {\n    return this.dashService.totalMarcadores;\n  }\n  get isUserLocationReady() {\n    return this.placesService.userLocation;\n  }\n  constructor(router, dashService, placesService) {\n    this.router = router;\n    this.dashService = dashService;\n    this.placesService = placesService;\n    this.zoomLevel = 16;\n    // center: [number, number] = [ -102.76457, 20.81449 ];\n    this.center = [-102.78239, 20.847367];\n    // Arreglo de marcadores\n    this.marcadoresArr = [];\n  }\n  ngOnInit() {\n    this.getMarks(false); // Traer los marcadores activos\n  }\n\n  ngAfterViewInit() {\n    // if( !this.placesService.userLocation ) throw Error('No hay PlacesService');\n    this.mapa = new mapboxgl.Map({\n      container: this.divMapa.nativeElement,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: this.center,\n      zoom: this.zoomLevel\n    });\n  }\n  getMarks(complete = false) {\n    this.dashService.getMarks(complete).subscribe(resp => {\n      if (resp === true) {\n        console.log(resp);\n        this.leerLocalStorage();\n      } else {\n        Swal.fire('ERROR', 'Error al obtener los marcadores', 'error');\n      }\n    });\n  }\n  agregarMarcador() {\n    const color = \"#xxxxxx\".replace(/x/g, y => (Math.random() * 16 | 0).toString(16));\n    // const color = \"#FF0000\"\n    const nuevoMarcador = new mapboxgl.Marker({\n      draggable: true,\n      color\n    }).setLngLat(this.center).addTo(this.mapa);\n    this.marcadoresArr.push({\n      id: \"\",\n      color,\n      marker: nuevoMarcador\n    });\n    // this.guardarMarcadores()\n    nuevoMarcador.on('dragend', () => {\n      this.guardarMarcadores();\n    });\n  }\n  // Centrar marcador\n  irMarcador(marcador) {\n    if (!marcador.centro) {\n      this.mapa.flyTo({\n        center: marcador.marker.getLngLat()\n      });\n    } else {\n      this.mapa.flyTo({\n        center: [marcador.centro[0], marcador.centro[1]]\n      });\n    }\n  }\n  // Guardar y/o actualizar marcadores en BD\n  guardarMarcadores(deleteId = '', i = 0) {\n    let lngLatArr = [];\n    if (this.marcadoresArr.length === 0) {\n      return;\n    }\n    this.marcadoresArr.forEach(m => {\n      const id = m.id;\n      const color = m.color;\n      let lng_aux = 0;\n      let lat_aux = 0;\n      if (!m.centro) {\n        const {\n          lng,\n          lat\n        } = m.marker.getLngLat();\n        lng_aux = lng;\n        lat_aux = lat;\n      } else {\n        lng_aux = m.centro[0];\n        lat_aux = m.centro[1];\n      }\n      console.log(m.marker);\n      lngLatArr.push({\n        id: id,\n        color: color,\n        centro: [lng_aux, lat_aux]\n        //location: JSON.stringify(m.marker!)\n      });\n    });\n\n    if (lngLatArr.length === 0) {\n      return;\n    }\n    // PeticiÃ³n a BD\n    this.dashService.createMark(lngLatArr).subscribe(resp => {\n      if (resp.ok === false) {\n        Swal.fire('Error al guardar los datos', resp.msg_es, 'error');\n      } else {\n        this.marcadoresArr = resp.mark;\n        // lngLatArr = resp.marks;\n      }\n    });\n    // Guardar en Local Storage\n    // localStorage.setItem('marcadores', JSON.stringify(lngLatArr) );\n  }\n\n  leerLocalStorage() {\n    // if ( !localStorage.getItem('marcadores') ) {\n    //   return;\n    // }\n    if (this.dashService.marcadores.marks.length === 0) {\n      return;\n    }\n    // const lngLatArr: MarcadorColor[] = JSON.parse( localStorage.getItem('marcadores')! );\n    const lngLatArr = this.dashService.marcadores.marks;\n    lngLatArr.forEach(m => {\n      const newMarker = new mapboxgl.Marker({\n        color: m.color,\n        draggable: true\n      }).setLngLat(m.centro).addTo(this.mapa);\n      this.marcadoresArr.push({\n        id: !m._id ? \"\" : m._id,\n        marker: newMarker,\n        color: m.color,\n        location: m.location\n      });\n      newMarker.on('dragend', () => {\n        this.guardarMarcadores();\n      });\n    });\n  }\n  // Borrar marcador de mapa y de BD\n  borrarMarcador(i) {\n    const marcador_to_delete = this.marcadoresArr[i];\n    if (!marcador_to_delete.id) {\n      this.marcadoresArr[i].marker?.remove();\n      this.marcadoresArr.splice(i, 1);\n      this.guardarMarcadores();\n    } else {\n      this.dashService.deleteMark(marcador_to_delete.id).subscribe(resp => {\n        if (resp === true) {\n          const markerOld = JSON.parse(this.marcadoresArr[i].location);\n          console.log(markerOld);\n          // makerOld.remove();\n          this.marcadoresArr.splice(i, 1);\n          this.guardarMarcadores(marcador_to_delete.id, i);\n        } else {\n          Swal.fire('ERROR', 'No se pudo eliminar marcador', 'error');\n        }\n      });\n    }\n  }\n};\n__decorate([ViewChild('mapaReady'), ViewChild('mapa')], MapComponent.prototype, \"divMapa\", void 0);\nMapComponent = __decorate([Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styles: [`\n    .mapa-container {\n      height: 100%;\n      width: 100%; \n    }\n\n    .list-group {\n      position: fixed;\n      top: 100px;\n      right: 20px;\n      z-index: 99;\n    }\n    \n    li {\n      cursor: pointer;\n    }\n\n    @media screen and (max-width: 991px){\n      .list-group {\n        position: fixed;\n        top: 300px;\n        right: 20px;\n        z-index: 99;\n      }\n    }\n    `]\n})], MapComponent);\nexport { MapComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}