{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    get usuario() {\n      return {\n        ...this._usuario\n      };\n    }\n    constructor(http) {\n      this.http = http;\n      this.api_key = environment.api_key;\n      this.baseUrl_users = environment.baseUrl_users;\n      this.baseUrl_companies = environment.baseUrl_companies;\n    }\n    register(name, first_lastname, second_lastname, email, password) {\n      const url = `${this.baseUrl_users}/users/register`;\n      const body = {\n        name,\n        user_name: email,\n        first_surname: first_lastname,\n        second_surname: second_lastname,\n        password\n      };\n      return this.http.post(url, body).pipe(tap(resp => {\n        console.log(resp);\n      }), map(resp => resp), catchError(err => of(err.error[0])));\n    }\n    login(email, password) {\n      const url = `${this.baseUrl_users}/auth/login`;\n      const body = {\n        user_name: email,\n        password,\n        keep_logged: true\n      };\n      return this.http.post(url, body).pipe(tap(resp => {\n        if (resp.ok) {\n          localStorage.setItem('token', resp.token);\n        }\n      }), map(resp => resp), catchError(err => of(err.error)));\n    }\n    validarToken() {\n      const url = `${this.baseUrl_users}/auth/validate`;\n      const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n      return this.http.get(url, {\n        headers\n      }).pipe(map(resp => {\n        // localStorage.setItem('token', resp.token! );\n        // console.log(resp)\n        this._usuario = {\n          _id: resp.user._id,\n          name: resp.user.name,\n          email: resp.user.user_name,\n          first_lastname: resp.user.first_surname,\n          second_lastname: resp.user.second_surname,\n          root: resp.user.root,\n          active: resp.user.active\n        };\n        return resp.ok;\n      }), catchError(err => of(false)));\n    }\n    logout() {\n      localStorage.clear();\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.HttpClient\n  }], null);\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}