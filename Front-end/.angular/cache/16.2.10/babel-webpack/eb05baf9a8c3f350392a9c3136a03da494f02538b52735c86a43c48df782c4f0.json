{"ast":null,"code":"import { Injectable } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DashService = /*#__PURE__*/(() => {\n  class DashService {\n    get usuario() {\n      return {\n        ...this._usuario\n      };\n    }\n    get usuarios() {\n      return {\n        ...this._usuarios\n      };\n    }\n    get totalUsuarios() {\n      return this._totalUsuarios;\n    }\n    constructor(http) {\n      this.http = http;\n      this.search = '';\n      this.api_key = environment.api_key;\n      this.baseUrl_users = environment.baseUrl_users;\n    }\n    getUsers(search = '') {\n      const url = `${this.baseUrl_users}/users`;\n      const params = {\n        search\n      };\n      const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n      return this.http.get(url, {\n        headers,\n        params\n      }).pipe(map(resp => {\n        this._usuarios = {\n          total: resp.count,\n          users: resp.users\n        };\n        return resp.ok;\n      }), catchError(err => of(false)));\n    }\n    getUser(id) {\n      const url = `${this.baseUrl_users}/users/${id}`;\n      const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n      return this.http.get(url, {\n        headers\n      }).pipe(map(resp => {\n        this._usuario = {\n          _id: resp.user._id,\n          name: resp.user.name,\n          email: resp.user.user_name,\n          first_lastname: resp.user.first_surname,\n          second_lastname: resp.user.second_surname,\n          root: resp.user.root,\n          active: resp.user.active\n        };\n        return resp.ok;\n      }), catchError(err => of(false)));\n    }\n    updateUser(_id, name, first_lastname, second_lastname, active, root) {\n      const url = `${this.baseUrl_users}/users/${_id}`;\n      const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n      const body = {\n        name,\n        first_surname: first_lastname,\n        second_surname: second_lastname,\n        active,\n        root,\n        keep_logged: true\n      };\n      return this.http.patch(url, body, {\n        headers\n      }).pipe(tap(resp => {\n        if (resp.ok) {}\n      }), map(resp => resp), catchError(err => of(err.error)));\n    }\n    deleteUser(id) {\n      const url = `${this.baseUrl_users}/users/${id}`;\n      const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n      return this.http.delete(url, {\n        headers\n      }).pipe(map(resp => {\n        // console.log(resp);\n        return resp.ok;\n      }), catchError(err => of(false)));\n    }\n    createMark(marcadores) {\n      const url = `${this.baseUrl_users}/marks`;\n      const body = {\n        marks: marcadores\n      };\n      const headers = new HttpHeaders().set('x-token', localStorage.getItem('token') || '');\n      return this.http.post(url, body, {\n        headers\n      }).pipe(tap(resp => {\n        console.log('hola', resp);\n      }), map(resp => resp), catchError(err => of(err.error[0])));\n    }\n    logout() {\n      localStorage.clear();\n    }\n    static #_ = this.ɵfac = function DashService_Factory(t) {\n      return new (t || DashService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DashService,\n      factory: DashService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DashService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DashService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: i1.HttpClient\n  }], null);\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}