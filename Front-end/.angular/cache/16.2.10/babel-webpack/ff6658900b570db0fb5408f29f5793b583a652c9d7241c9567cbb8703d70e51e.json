{"ast":null,"code":"import { Component, ViewChild } from '@angular/core';\nimport * as mapboxgl from 'mapbox-gl';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/dashboard.service\";\nimport * as i3 from \"../../services/places.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../shared/menu/menu.component\";\nconst _c0 = [\"mapa\"];\nconst _c1 = a0 => ({\n  \"background-color\": a0\n});\nfunction MapComponent_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 5);\n    i0.ɵɵlistener(\"click\", function MapComponent_li_6_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const marcador_r2 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.irMarcador(marcador_r2));\n    })(\"dblclick\", function MapComponent_li_6_Template_li_dblclick_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.borrarMarcador(i_r3));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const marcador_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, marcador_r2.color));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Cat\\u00E1strofe \", i_r3 + 1, \" \");\n  }\n}\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    get marcadores() {\n      return this.dashService.marcadores;\n    }\n    get totalMarcadores() {\n      return this.dashService.totalMarcadores;\n    }\n    get isUserLocationReady() {\n      return true;\n    }\n    constructor(router, dashService, placesService) {\n      this.router = router;\n      this.dashService = dashService;\n      this.placesService = placesService;\n      this.zoomLevel = 16;\n      // center: [number, number] = [ -102.76457, 20.81449 ];\n      this.center = [-102.78239, 20.847367];\n      // Arreglo de marcadores\n      this.marcadoresArr = [];\n    }\n    ngOnInit() {\n      console.log(this.placesService.userLocation);\n      this.getMarks(false); // Traer los marcadores activos\n    }\n\n    ngAfterViewInit() {\n      // if( !this.PlacesService.userLocation ) throw Error('No hay PlacesService');\n      this.mapa = new mapboxgl.Map({\n        container: this.divMapa.nativeElement,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: this.center,\n        zoom: this.zoomLevel\n      });\n    }\n    getMarks(complete = false) {\n      this.dashService.getMarks(complete).subscribe(resp => {\n        if (resp === true) {\n          console.log(resp);\n          this.leerLocalStorage();\n        } else {\n          Swal.fire('ERROR', 'Error al obtener los marcadores', 'error');\n        }\n      });\n    }\n    agregarMarcador() {\n      const color = \"#xxxxxx\".replace(/x/g, y => (Math.random() * 16 | 0).toString(16));\n      // const color = \"#FF0000\"\n      const nuevoMarcador = new mapboxgl.Marker({\n        draggable: true,\n        color\n      }).setLngLat(this.center).addTo(this.mapa);\n      this.marcadoresArr.push({\n        id: \"\",\n        color,\n        marker: nuevoMarcador\n      });\n      // this.guardarMarcadores()\n      nuevoMarcador.on('dragend', () => {\n        this.guardarMarcadores();\n      });\n    }\n    // Centrar marcador\n    irMarcador(marcador) {\n      if (!marcador.centro) {\n        this.mapa.flyTo({\n          center: marcador.marker.getLngLat()\n        });\n      } else {\n        this.mapa.flyTo({\n          center: [marcador.centro[0], marcador.centro[1]]\n        });\n      }\n    }\n    // Guardar y/o actualizar marcadores en BD\n    guardarMarcadores(deleteId = '', i = 0) {\n      let lngLatArr = [];\n      if (this.marcadoresArr.length === 0) {\n        return;\n      }\n      this.marcadoresArr.forEach(m => {\n        const id = m.id;\n        const color = m.color;\n        let lng_aux = 0;\n        let lat_aux = 0;\n        if (!m.centro) {\n          const {\n            lng,\n            lat\n          } = m.marker.getLngLat();\n          lng_aux = lng;\n          lat_aux = lat;\n        } else {\n          lng_aux = m.centro[0];\n          lat_aux = m.centro[1];\n        }\n        console.log(m.marker);\n        lngLatArr.push({\n          id: id,\n          color: color,\n          centro: [lng_aux, lat_aux]\n          //location: JSON.stringify(m.marker!)\n        });\n      });\n\n      if (lngLatArr.length === 0) {\n        return;\n      }\n      // Petición a BD\n      this.dashService.createMark(lngLatArr).subscribe(resp => {\n        if (resp.ok === false) {\n          Swal.fire('Error al guardar los datos', resp.msg_es, 'error');\n        } else {\n          this.marcadoresArr = resp.mark;\n          // lngLatArr = resp.marks;\n        }\n      });\n      // Guardar en Local Storage\n      // localStorage.setItem('marcadores', JSON.stringify(lngLatArr) );\n    }\n\n    leerLocalStorage() {\n      // if ( !localStorage.getItem('marcadores') ) {\n      //   return;\n      // }\n      if (this.dashService.marcadores.marks.length === 0) {\n        return;\n      }\n      // const lngLatArr: MarcadorColor[] = JSON.parse( localStorage.getItem('marcadores')! );\n      const lngLatArr = this.dashService.marcadores.marks;\n      lngLatArr.forEach(m => {\n        const newMarker = new mapboxgl.Marker({\n          color: m.color,\n          draggable: true\n        }).setLngLat(m.centro).addTo(this.mapa);\n        this.marcadoresArr.push({\n          id: !m._id ? \"\" : m._id,\n          marker: newMarker,\n          color: m.color,\n          location: m.location\n        });\n        newMarker.on('dragend', () => {\n          this.guardarMarcadores();\n        });\n      });\n    }\n    // Borrar marcador de mapa y de BD\n    borrarMarcador(i) {\n      const marcador_to_delete = this.marcadoresArr[i];\n      if (!marcador_to_delete.id) {\n        this.marcadoresArr[i].marker?.remove();\n        this.marcadoresArr.splice(i, 1);\n        this.guardarMarcadores();\n      } else {\n        this.dashService.deleteMark(marcador_to_delete.id).subscribe(resp => {\n          if (resp === true) {\n            const markerOld = JSON.parse(this.marcadoresArr[i].location);\n            console.log(markerOld);\n            // makerOld.remove();\n            this.marcadoresArr.splice(i, 1);\n            this.guardarMarcadores(marcador_to_delete.id, i);\n          } else {\n            Swal.fire('ERROR', 'No se pudo eliminar marcador', 'error');\n          }\n        });\n      }\n    }\n    static #_ = this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.DashService), i0.ɵɵdirectiveInject(i3.PlacesService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      viewQuery: function MapComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.divMapa = _t.first);\n        }\n      },\n      decls: 7,\n      vars: 1,\n      consts: [[1, \"mapa-container\"], [\"mapa\", \"\"], [1, \"list-group\"], [1, \"list-group-item\", \"list-group-item-info\", 3, \"click\"], [\"class\", \"list-group-item\", 3, \"ngStyle\", \"click\", \"dblclick\", 4, \"ngFor\", \"ngForOf\"], [1, \"list-group-item\", 3, \"ngStyle\", \"click\", \"dblclick\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-menu\")(1, \"div\", 0, 1);\n          i0.ɵɵelementStart(3, \"ul\", 2)(4, \"li\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_li_click_4_listener() {\n            return ctx.agregarMarcador();\n          });\n          i0.ɵɵtext(5, \" + Agregar \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(6, MapComponent_li_6_Template, 2, 4, \"li\", 4);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngForOf\", ctx.marcadoresArr);\n        }\n      },\n      dependencies: [i4.NgForOf, i4.NgStyle, i5.MenuComponent],\n      styles: [\".mapa-container[_ngcontent-%COMP%]{height:100%;width:100%}.list-group[_ngcontent-%COMP%]{position:fixed;top:100px;right:20px;z-index:99}li[_ngcontent-%COMP%]{cursor:pointer}@media screen and (max-width: 991px){.list-group[_ngcontent-%COMP%]{position:fixed;top:300px;right:20px;z-index:99}}\"]\n    });\n  }\n  return MapComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-map',\n      template: \"\\n\\n    <app-menu></app-menu> \\n    <div #mapa class=\\\"mapa-container\\\"></div>\\n    <ul class=\\\"list-group\\\">\\n        <li class=\\\"list-group-item list-group-item-info\\\"\\n            (click)=\\\"agregarMarcador()\\\">\\n            + Agregar\\n        </li>\\n        <li class=\\\"list-group-item\\\"\\n            *ngFor=\\\"let marcador of marcadoresArr; let i = index\\\"\\n            (click)=\\\"irMarcador( marcador );\\\"\\n            (dblclick)=\\\"borrarMarcador( i )\\\"\\n            [ngStyle]=\\\"{\\n                'background-color': marcador.color\\n            }\\\">\\n            Cat\\u00E1strofe {{ i + 1 }}\\n        </li>\\n    </ul>\\n\",\n      styles: [\".mapa-container{height:100%;width:100%}.list-group{position:fixed;top:100px;right:20px;z-index:99}li{cursor:pointer}@media screen and (max-width: 991px){.list-group{position:fixed;top:300px;right:20px;z-index:99}}\\n\"]\n    }]\n  }], () => [{\n    type: i1.Router\n  }, {\n    type: i2.DashService\n  }, {\n    type: i3.PlacesService\n  }], {\n    divMapa: [{\n      type: ViewChild,\n      args: ['mapa']\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(MapComponent, {\n    className: \"MapComponent\"\n  });\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}