{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport * as mapboxgl from 'mapbox-gl';\nimport Swal from 'sweetalert2';\nlet MapComponent = class MapComponent {\n  get usuario() {\n    localStorage.setItem('_id', this.authService.usuario._id);\n    return this.authService.usuario;\n  }\n  get marcadores() {\n    return this.dashService.marcadores;\n  }\n  get totalMarcadores() {\n    return this.dashService.totalMarcadores;\n  }\n  get isUserLocationReady() {\n    return this.placesService.userLocation;\n  }\n  constructor(router, dashService, authService, placesService, socketService) {\n    this.router = router;\n    this.dashService = dashService;\n    this.authService = authService;\n    this.placesService = placesService;\n    this.socketService = socketService;\n    this.prueba = true;\n    this.zoomLevel = 16;\n    // center: [number, number] = [ -102.76457, 20.81449 ];\n    this.center = [-102.78239, 20.847367];\n    this.userLocation = this.placesService.userLocation || [-102.78239, 20.847367];\n    // Arreglo de marcadores\n    this.marcadoresArr = [];\n    this.infoMArks = [];\n    this.socketService.callback.subscribe(res => {\n      // console.log(res);\n    });\n  }\n  ngOnInit() {\n    // if( !this.placesService.userLocation ) throw Error('No hay placesService');\n    this.getMarks(false); // Traer los marcadores activos\n    //this.socketService.emit('Hola')\n  }\n\n  ngAfterViewInit() {\n    const ubicacionPrueba = !this.prueba ? this.userLocation : [-102.78239, 20.847367];\n    this.mapa = new mapboxgl.Map({\n      container: this.divMapa.nativeElement,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      // center: ubicacionPrueba,\n      center: this.center,\n      zoom: this.zoomLevel\n    });\n    const popup = new mapboxgl.Popup().setHTML(`\n      <h6>Aqui estoy yo</h6>\n      <spam>En algun lugardel mundo</spam>\n      `);\n    const color = \"#FF0000\";\n    const geolocalizacion = new mapboxgl.Marker({\n      draggable: false,\n      color\n    }).setLngLat(ubicacionPrueba).setPopup(popup).addTo(this.mapa);\n    geolocalizacion.on('dragend', () => {});\n  }\n  getMarks(complete = false) {\n    this.dashService.getMarks(complete).subscribe(resp => {\n      if (resp === true) {\n        console.log(resp);\n        this.leerLocalStorage();\n      } else {\n        Swal.fire('ERROR', 'Error al obtener los marcadores', 'error');\n      }\n    });\n  }\n  agregarMarcador(root = false) {\n    if (!root) {\n      Swal.fire('Error al agregar un marcador', 'Tu usuario no puede agregar marcadores', 'error');\n      return;\n    }\n    const ubicacionPrueba = !this.prueba ? this.userLocation : [-102.78239, 20.847367];\n    const color = \"#xxxxxx\".replace(/x/g, y => (Math.random() * 16 | 0).toString(16));\n    // const color = \"#FF0000\"\n    const found = this.marcadoresArr.find(element => element.color === color);\n    if (found || color === \"#FF0000\") {\n      // console.log(\"Color repetido\");\n      this.agregarMarcador(root);\n      return;\n    }\n    const nuevoMarcador = new mapboxgl.Marker({\n      draggable: true,\n      color\n    }).setLngLat(this.center).addTo(this.mapa);\n    this.marcadoresArr.push({\n      id: \"\",\n      color,\n      marker: nuevoMarcador\n    });\n    // this.guardarMarcadores(); \n    nuevoMarcador.on('dragend', () => {\n      this.guardarMarcadores();\n    });\n  }\n  // Ir a mi ubicacion\n  irUbicacion() {\n    const ubicacionPrueba = !this.prueba ? this.userLocation : [-102.78239, 20.847367];\n    this.mapa.flyTo({\n      center: ubicacionPrueba\n    });\n  }\n  // Centrar marcador\n  irMarcador(marcador) {\n    if (!marcador.centro) {\n      this.mapa.flyTo({\n        center: marcador.marker.getLngLat()\n      });\n    } else {\n      this.mapa.flyTo({\n        center: [marcador.centro[0], marcador.centro[1]]\n      });\n    }\n  }\n  // Guardar y/o actualizar marcadores en BD\n  guardarMarcadores() {\n    let lngLatArr = [];\n    if (this.marcadoresArr.length === 0) {\n      return;\n    }\n    this.marcadoresArr.forEach(m => {\n      const id = m.id;\n      const color = m.color;\n      let lng_aux = 0;\n      let lat_aux = 0;\n      if (!m.centro) {\n        const {\n          lng,\n          lat\n        } = m.marker.getLngLat();\n        lng_aux = lng;\n        lat_aux = lat;\n      } else {\n        lng_aux = m.centro[0];\n        lat_aux = m.centro[1];\n      }\n      lngLatArr.push({\n        id: id,\n        color: color,\n        centro: [lng_aux, lat_aux]\n      });\n    });\n    if (lngLatArr.length === 0) {\n      return;\n    }\n    // Petición a BD\n    this.dashService.createMark(lngLatArr, JSON.stringify(lngLatArr)).subscribe(resp => {\n      if (resp.ok === false) {\n        Swal.fire('Error al guardar los datos', resp.msg_es, 'error');\n      }\n    });\n    // Guardar en Local Storage\n    // localStorage.setItem('marcadores', JSON.stringify(lngLatArr) );\n  }\n\n  leerLocalStorage(info = []) {\n    // if ( !localStorage.getItem('marcadores') ) {\n    //   return;\n    // }\n    let lngLatArr = [];\n    if (!info || info.length === 0) {\n      if (this.dashService.marcadores.marks.length === 0) {\n        return;\n      }\n      lngLatArr = this.dashService.marcadores.marks;\n    } else {\n      lngLatArr = info;\n    }\n    // const lngLatArr: MarcadorColor[] = JSON.parse( localStorage.getItem('marcadores')! );\n    lngLatArr.forEach(m => {\n      const newMarker = new mapboxgl.Marker({\n        color: m.color,\n        draggable: true\n      }).setLngLat(m.centro).addTo(this.mapa);\n      this.marcadoresArr.push({\n        id: !m._id ? \"\" : m._id,\n        marker: newMarker,\n        color: m.color\n      });\n      newMarker.on('dragend', () => {\n        this.guardarMarcadores();\n      });\n    });\n  }\n  // Borrar marcador de mapa y de BD\n  borrarMarcador(i, root) {\n    if (!root) {\n      Swal.fire('Error al eliminar los datos', 'Tu usuario no puede eliminar marcadores', 'error');\n      return;\n    }\n    Swal.fire({\n      title: '¿Estas seguro de eliminar el marcador?',\n      text: \"¡No se podrá revertir el proceso!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#d33',\n      cancelButtonColor: '#7D7F7D',\n      confirmButtonText: 'Eliminar',\n      cancelButtonText: 'Cancelar'\n    }).then(result => {\n      if (result.isConfirmed) {\n        const {\n          lng,\n          lat\n        } = this.marcadoresArr[i].marker.getLngLat();\n        const centroDelete = [lng, lat];\n        this.dashService.deleteMark(this.marcadoresArr[i].color, centroDelete).subscribe(resp => {\n          if (resp === true) {\n            this.marcadoresArr[i].marker?.remove();\n            this.marcadoresArr.splice(i, 1);\n            this.guardarMarcadores();\n          } else {\n            Swal.fire('ERROR', 'No se pudo eliminar marcador', 'error');\n            return;\n          }\n        });\n      }\n    });\n  }\n};\n__decorate([ViewChild('mapa')], MapComponent.prototype, \"divMapa\", void 0);\nMapComponent = __decorate([Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styles: [`\n    .mapa-container {\n      height: 100%;\n      width: 100%; \n    }\n\n    .list-group-own {\n      position: fixed;\n      top: 100px;\n      left: 20px;\n      z-index: 99;\n    }\n\n    .list-group {\n      position: fixed;\n      top: 100px;\n      right: 20px;\n      z-index: 99;\n    }\n\n    .btn-group {\n      position: fixed;\n      top: 100px;\n      right: 20px;\n      z-index: 99;\n    }\n    \n    li {\n      cursor: pointer;\n    }\n\n    .dropdown-menu {\n      min-width: 8rem !important; \n    }\n\n    @media screen and (max-width: 991px){\n      .list-group-own {\n        position: fixed;\n        top: 700px;\n        left: 10px;\n        z-index: 99;\n      }\n\n      .list-group {\n        position: fixed;\n        top: 300px;\n        right: 10px;\n        z-index: 99;\n      }\n\n      .btn-group {\n        position: fixed;\n        top: 300px;\n        right: 10px;\n        z-index: 99;\n      }\n    }\n    `]\n})], MapComponent);\nexport { MapComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}