{"ast":null,"code":"import { Component, ViewChild } from '@angular/core';\nimport * as mapboxgl from 'mapbox-gl';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../services/dashboard.service\";\nimport * as i3 from \"src/app/auth/services/auth.service\";\nimport * as i4 from \"../../services/places.service\";\nimport * as i5 from \"../../services/socket.service\";\nimport * as i6 from \"../../shared/menu/menu.component\";\nconst _c0 = [\"mapa\"];\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    get usuario() {\n      localStorage.setItem('_id', this.authService.usuario._id);\n      return this.authService.usuario;\n    }\n    get marcadores() {\n      return this.dashService.marcadores;\n    }\n    get totalMarcadores() {\n      return this.dashService.totalMarcadores;\n    }\n    get isUserLocationReady() {\n      return this.placesService.userLocation;\n    }\n    constructor(router, dashService, authService, placesService, socketService) {\n      this.router = router;\n      this.dashService = dashService;\n      this.authService = authService;\n      this.placesService = placesService;\n      this.socketService = socketService;\n      this.prueba = true;\n      this.zoomLevel = 16;\n      // center: [number, number] = [ -102.76457, 20.81449 ];\n      this.center = [-102.78239, 20.847367];\n      this.userLocation = this.placesService.userLocation || [-102.78239, 20.847367];\n      // Arreglo de marcadores\n      this.marcadoresArr = [];\n      this.infoMArks = [];\n      this.socketService.callback.subscribe(res => {\n        // console.log(res);\n      });\n    }\n    ngOnInit() {\n      // if( !this.placesService.userLocation ) throw Error('No hay placesService');\n      this.getMarks(false); // Traer los marcadores activos\n      //this.socketService.emit('Hola')\n    }\n\n    ngAfterViewInit() {\n      const ubicacionPrueba = !this.prueba ? this.userLocation : [-102.78239, 20.847367];\n      this.mapa = new mapboxgl.Map({\n        container: this.divMapa.nativeElement,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        // center: ubicacionPrueba,\n        center: this.center,\n        zoom: this.zoomLevel\n      });\n      const popup = new mapboxgl.Popup().setHTML(`\n      <h6>Aqui estoy yo</h6>\n      <spam>En algun lugardel mundo</spam>\n      `);\n      const color = \"#FF0000\";\n      const geolocalizacion = new mapboxgl.Marker({\n        draggable: false,\n        color\n      }).setLngLat(ubicacionPrueba).setPopup(popup).addTo(this.mapa);\n      geolocalizacion.on('dragend', () => {});\n    }\n    getMarks(complete = false) {\n      this.dashService.getMarks(complete).subscribe(resp => {\n        if (resp === true) {\n          console.log(resp);\n          this.leerLocalStorage();\n        } else {\n          Swal.fire('ERROR', 'Error al obtener los marcadores', 'error');\n        }\n      });\n    }\n    agregarMarcador(root = false) {\n      if (!root) {\n        Swal.fire('Error al agregar un marcador', 'Tu usuario no puede agregar marcadores', 'error');\n        return;\n      }\n      const ubicacionPrueba = !this.prueba ? this.userLocation : [-102.78239, 20.847367];\n      const color = \"#xxxxxx\".replace(/x/g, y => (Math.random() * 16 | 0).toString(16));\n      // const color = \"#FF0000\"\n      const found = this.marcadoresArr.find(element => element.color === color);\n      if (found || color === \"#FF0000\") {\n        // console.log(\"Color repetido\");\n        this.agregarMarcador(root);\n        return;\n      }\n      const nuevoMarcador = new mapboxgl.Marker({\n        draggable: true,\n        color\n      }).setLngLat(this.center).addTo(this.mapa);\n      this.marcadoresArr.push({\n        id: \"\",\n        color,\n        marker: nuevoMarcador\n      });\n      // this.guardarMarcadores(); \n      nuevoMarcador.on('dragend', () => {\n        this.guardarMarcadores();\n      });\n    }\n    // Ir a mi ubicacion\n    irUbicacion() {\n      const ubicacionPrueba = !this.prueba ? this.userLocation : [-102.78239, 20.847367];\n      this.mapa.flyTo({\n        center: ubicacionPrueba\n      });\n    }\n    // Centrar marcador\n    irMarcador(marcador) {\n      if (!marcador.centro) {\n        this.mapa.flyTo({\n          center: marcador.marker.getLngLat()\n        });\n      } else {\n        this.mapa.flyTo({\n          center: [marcador.centro[0], marcador.centro[1]]\n        });\n      }\n    }\n    // Guardar y/o actualizar marcadores en BD\n    guardarMarcadores() {\n      let lngLatArr = [];\n      if (this.marcadoresArr.length === 0) {\n        return;\n      }\n      this.marcadoresArr.forEach(m => {\n        const id = m.id;\n        const color = m.color;\n        let lng_aux = 0;\n        let lat_aux = 0;\n        if (!m.centro) {\n          const {\n            lng,\n            lat\n          } = m.marker.getLngLat();\n          lng_aux = lng;\n          lat_aux = lat;\n        } else {\n          lng_aux = m.centro[0];\n          lat_aux = m.centro[1];\n        }\n        lngLatArr.push({\n          id: id,\n          color: color,\n          centro: [lng_aux, lat_aux]\n        });\n      });\n      if (lngLatArr.length === 0) {\n        return;\n      }\n      // Petición a BD\n      this.dashService.createMark(lngLatArr, JSON.stringify(lngLatArr)).subscribe(resp => {\n        if (resp.ok === false) {\n          Swal.fire('Error al guardar los datos', resp.msg_es, 'error');\n        }\n      });\n      // Guardar en Local Storage\n      // localStorage.setItem('marcadores', JSON.stringify(lngLatArr) );\n    }\n\n    leerLocalStorage(info = []) {\n      // if ( !localStorage.getItem('marcadores') ) {\n      //   return;\n      // }\n      let lngLatArr = [];\n      if (!info || info.length === 0) {\n        if (this.dashService.marcadores.marks.length === 0) {\n          return;\n        }\n        lngLatArr = this.dashService.marcadores.marks;\n      } else {\n        lngLatArr = info;\n      }\n      // const lngLatArr: MarcadorColor[] = JSON.parse( localStorage.getItem('marcadores')! );\n      lngLatArr.forEach(m => {\n        const newMarker = new mapboxgl.Marker({\n          color: m.color,\n          draggable: true\n        }).setLngLat(m.centro).addTo(this.mapa);\n        this.marcadoresArr.push({\n          id: !m._id ? \"\" : m._id,\n          marker: newMarker,\n          color: m.color\n        });\n        newMarker.on('dragend', () => {\n          this.guardarMarcadores();\n        });\n      });\n    }\n    // Borrar marcador de mapa y de BD\n    borrarMarcador(i, root) {\n      if (!root) {\n        Swal.fire('Error al eliminar los datos', 'Tu usuario no puede eliminar marcadores', 'error');\n        return;\n      }\n      Swal.fire({\n        title: '¿Estas seguro de eliminar el marcador?',\n        text: \"¡No se podrá revertir el proceso!\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#d33',\n        cancelButtonColor: '#7D7F7D',\n        confirmButtonText: 'Eliminar',\n        cancelButtonText: 'Cancelar'\n      }).then(result => {\n        if (result.isConfirmed) {\n          const {\n            lng,\n            lat\n          } = this.marcadoresArr[i].marker.getLngLat();\n          const centroDelete = [lng, lat];\n          this.dashService.deleteMark(this.marcadoresArr[i].color, centroDelete).subscribe(resp => {\n            if (resp === true) {\n              this.marcadoresArr[i].marker?.remove();\n              this.marcadoresArr.splice(i, 1);\n              this.guardarMarcadores();\n            } else {\n              Swal.fire('ERROR', 'No se pudo eliminar marcador', 'error');\n              return;\n            }\n          });\n        }\n      });\n    }\n    static #_ = this.ɵfac = function MapComponent_Factory(t) {\n      return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.DashService), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.PlacesService), i0.ɵɵdirectiveInject(i5.SocketService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MapComponent,\n      selectors: [[\"app-map\"]],\n      viewQuery: function MapComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.divMapa = _t.first);\n        }\n      },\n      decls: 7,\n      vars: 0,\n      consts: [[1, \"mapa-container\"], [\"mapa\", \"\"], [1, \"list-group-own\"], [1, \"list-group-item\", \"list-group-item-primary\", 3, \"click\"]],\n      template: function MapComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-menu\")(1, \"div\", 0, 1);\n          i0.ɵɵelementStart(3, \"ul\", 2)(4, \"li\", 3);\n          i0.ɵɵlistener(\"click\", function MapComponent_Template_li_click_4_listener() {\n            return ctx.irUbicacion();\n          });\n          i0.ɵɵtext(5, \" Ir a mi ubicaci\\u00F3n \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(6, \"ul\");\n        }\n      },\n      dependencies: [i6.MenuComponent],\n      styles: [\".mapa-container[_ngcontent-%COMP%]{height:100%;width:100%}.list-group-own[_ngcontent-%COMP%]{position:fixed;top:100px;left:20px;z-index:99}.list-group[_ngcontent-%COMP%]{position:fixed;top:100px;right:20px;z-index:99}li[_ngcontent-%COMP%]{cursor:pointer}@media screen and (max-width: 991px){.list-group-own[_ngcontent-%COMP%]{position:fixed;top:700px;left:10px;z-index:99}.list-group[_ngcontent-%COMP%]{position:fixed;top:300px;right:10px;z-index:99}}\"]\n    });\n  }\n  return MapComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'app-map',\n      template: \"<app-menu ></app-menu> \\n<div #mapa class=\\\"mapa-container\\\"></div>\\n<ul class=\\\"list-group-own\\\">\\n    <li class=\\\"list-group-item list-group-item-primary\\\"\\n        (click)=\\\"irUbicacion()\\\">\\n        Ir a mi ubicaci\\u00F3n\\n    </li>\\n\\n</ul>\\n<ul>\\n\\n</ul>\\n<!-- <ul class=\\\"list-group\\\">\\n    <li class=\\\"list-group-item list-group-item-info\\\"\\n        (click)=\\\"agregarMarcador( usuario.root )\\\">\\n        + Agregar\\n    </li>\\n    <li class=\\\"list-group-item\\\"\\n        *ngFor=\\\"let marcador of marcadoresArr; let i = index\\\"\\n        (click)=\\\"irMarcador( marcador );\\\"\\n        (dblclick)=\\\"borrarMarcador( i, usuario.root )\\\"\\n        [ngStyle]=\\\"{\\n            'background-color': marcador.color\\n        }\\\">\\n        Cat\\u00E1strofe {{ i + 1 }}\\n    </li>\\n</ul> -->\\n\",\n      styles: [\".mapa-container{height:100%;width:100%}.list-group-own{position:fixed;top:100px;left:20px;z-index:99}.list-group{position:fixed;top:100px;right:20px;z-index:99}li{cursor:pointer}@media screen and (max-width: 991px){.list-group-own{position:fixed;top:700px;left:10px;z-index:99}.list-group{position:fixed;top:300px;right:10px;z-index:99}}\\n\"]\n    }]\n  }], () => [{\n    type: i1.Router\n  }, {\n    type: i2.DashService\n  }, {\n    type: i3.AuthService\n  }, {\n    type: i4.PlacesService\n  }, {\n    type: i5.SocketService\n  }], {\n    divMapa: [{\n      type: ViewChild,\n      args: ['mapa']\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(MapComponent, {\n    className: \"MapComponent\"\n  });\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}